# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI

name: 'Terraform'

on:
  workflow_dispatch
  
#  push:
#    branches:
#    - "main"
#  pull_request:

permissions:
  contents: read

jobs:
  tf-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: 'iac/terraform'
    
    env:
      STORAGE_ACCOUNT: 'tfbackendprodsa4402'
      CONTAINER_NAME: 'tfstate'
      RESOURCE_GROUP: 'rg-tf-backend-prod'
      TF_KEY: 'terraform-prod'
      TF_VARS: 'config_prod.tfvars'
      # AZURE service principal details
      ARM_CLIENT_ID: ${{ secrets.arm_client_id_prod }}
      ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret_prod }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.arm_subscription_id_prod }}
      ARM_TENANT_ID: ${{ secrets.arm_tenant_id_prod }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_KEY"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
    
    # Validates the Terraform configuration files
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan --var-file=$TF_VARS --out=plan.tfplan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' # && github.event_name == 'push'
      run: terraform apply plan.tfplan --auto-approve
